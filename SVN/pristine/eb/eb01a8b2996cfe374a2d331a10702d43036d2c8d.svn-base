package model;

import java.io.File;
import java.text.DateFormat;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author xjurp20
 */
public class ImportDat {

    private final Set<Student> studenti;
    private final Set<Firma> firmy;

    public ImportDat() {
        studenti = new HashSet<>();
        firmy = new HashSet<>();

        loadFirmy(new File("kits.xml"));
        loadStudenty(new File("studenti.xml"));
    }

    private void loadFirmy(File file) {
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file);
            doc.getDocumentElement().normalize();

            NodeList nListFirma = doc.getElementsByTagName("firma");
            for (int j = 0; j < nListFirma.getLength(); j++) {
                Node nNode = nListFirma.item(j);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    

                    Set<Student> studenti = new HashSet<>();
                    Set<Staz> staze = new HashSet<>();
                    //STUDENTI
                    NodeList nListStudent = nNode.getElementsByTagName("student");
                    for (int i = 0; i < nListStudent.getLength(); i++) {
                        Node nNode = nListStudent.item(i);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;
                            studenti.add(
                                    new Student(
                                    eElement.getElementsByTagName(""
                                    + Student.Atribut.JMENO).item(0).getTextContent(),
                                    eElement.getElementsByTagName(""
                                    + Student.Atribut.EMAIL).item(0).getTextContent(),
                                    Integer.parseInt(eElement.getElementsByTagName(""
                                    + Student.Atribut.TELEFON).item(0).getTextContent()),
                                    eElement.getElementsByTagName(""
                                    + Student.Atribut.XNAME).item(0).getTextContent(),
                                    DateFormat.getInstance().parse(eElement.getElementsByTagName(""
                                    + Student.Atribut.DATNAR).item(0).getTextContent()),
                                    Student.Fakulta.valueOf(eElement.getElementsByTagName(""
                                    + Student.Atribut.FAKULTA).item(0).getTextContent()),
                                    Integer.parseInt(eElement.getElementsByTagName(""
                                    + Student.Atribut.SEMESTR).item(0).getTextContent())));
                        }
                    }
                    //STAZE
                    NodeList nListStaz = doc.getElementsByTagName("staz");
                    for (int i = 0; i < nListStaz.getLength(); i++) {
                        Node nNode = nListStaz.item(i);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;
                            staze.add(
                                    new Staz(
                                    eElement.getElementsByTagName(""
                                    + Staz.Atribut.NAZEV).item(0).getTextContent(),
                                    Staz.Obor.valueOf(eElement.getElementsByTagName(""
                                    + Staz.Atribut.OBOR).item(0).getTextContent()),
                                    DateFormat.getInstance().parse(eElement.getElementsByTagName(""
                                    + Staz.Atribut.DATNASTUPU).item(0).getTextContent()),
                                    Integer.parseInt(eElement.getElementsByTagName(""
                                    + Staz.Atribut.DELKA).item(0).getTextContent()),
                                    Integer.parseInt(eElement.getElementsByTagName(""
                                    + Staz.Atribut.KAPACITA).item(0).getTextContent()),
                                    Staz.Lokalita.valueOf(eElement.getElementsByTagName(""
                                    + Staz.Atribut.LOKALITA).item(0).getTextContent()),
                                    eElement.getElementsByTagName(""
                                    + Staz.Atribut.POPIS).item(0).getTextContent()));
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Model.logger.log(Level.SEVERE, "Data nebyly nacteny!", ex);
        }
    }

    private void loadStudenty(File file) {
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file);

            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("student");

            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    studenti.add(
                            new Student(
                            eElement.getElementsByTagName(""
                            + Student.Atribut.JMENO).item(0).getTextContent(),
                            eElement.getElementsByTagName(""
                            + Student.Atribut.EMAIL).item(0).getTextContent(),
                            Integer.parseInt(eElement.getElementsByTagName(""
                            + Student.Atribut.TELEFON).item(0).getTextContent()),
                            eElement.getElementsByTagName(""
                            + Student.Atribut.XNAME).item(0).getTextContent(),
                            DateFormat.getInstance().parse(eElement.getElementsByTagName(""
                            + Student.Atribut.DATNAR).item(0).getTextContent()),
                            Student.Fakulta.valueOf(eElement.getElementsByTagName(""
                            + Student.Atribut.FAKULTA).item(0).getTextContent()),
                            Integer.parseInt(eElement.getElementsByTagName(""
                            + Student.Atribut.SEMESTR).item(0).getTextContent())));
                }
            }
        } catch (Exception ex) {
            Model.logger.log(Level.SEVERE, "Data nebyly nacteny!", ex);
        }
    }

    public Set<Firma> getFirmy() {
        return firmy;
    }

    public Set<Student> getStudenty() {
        return studenti;
    }
}
